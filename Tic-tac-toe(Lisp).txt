
;;Mariannf
;;
;;Assignment 1
;;
;;06/9/2015

(defun make-board ()
              (list 'board 0 0 0 0 0 0 0 0 0))
			  
			  
(defun convert-to-letter (v)
      (cond (( equal v 1) "O")
			((equal v 10) "X")
           (t " ")))
		   
		   
(defun print-row (x y z)
              
              (format t "~A | ~A | ~A"
                     (convert-to-letter x)
                     (convert-to-letter y)
                     (convert-to-letter z)))

(defun print-ui-row (x y z)
  (format t "~A | ~A | ~A" x y z))

(defun print-turn-break ()
  (format t "~%~% ********************************** ~%~%~%")
)
					 
(defun print-board (board)
              (format t "~& ")
              (print-ui-row 1 2 3)
              (format t "~15T")
              (print-row
               (nth 1 board) (nth 2 board) (nth 3 board))
              (format t "~& ----------- ~T ----------- ~% ")
              (print-ui-row 4 5 6)
              (format t "~15T")
               (print-row
               (nth 4 board) (nth 5 board) (nth 6 board))
              (format t "~& ----------- ~T ----------- ~% ")
              (print-ui-row 7 8 9)
              (format t "~15T")
              (print-row
               (nth 7 board) (nth 8 board) (nth 9 board))
              (format t "~%~%"))



(defun make-move (player pos board)
  (setf (nth pos board) player) board)




			  
(setf *triplets*
                       '((1 2 3) (4 5 6) (7 8 9)
                         (1 4 7) (2 5 8) (3 6 9)
                         (1 5 9) (3 5 7)))
						 
						 
						 
(defun sum-triplet (board triplet)
                   (+ (nth (first triplet) board)
                      (nth (second triplet) board)
                      (nth (third triplet) board)))
					  
					  
(defun compute-sums (board)
                   (mapcar #' (lambda (triplet)
                                (sum-triplet board triplet))
                           *triplets*))
						   
						   
						   
(defun winner-p(board)
                   (let (( sums (compute-sums board)))
                     (or (member (* 3 *computer*) sums)
                         (member (* 3 *opponent*) sums))))
						 
						 
(defun play-one-game ()
                   (if (y-or-n-p "Would you like to go first? ")
                       (opponent-move (make-board))
                     (computer-move (make-board))))

					 
					 
					 
(defun opponent-move (board)
                   (print-turn-break)
                   (let* ((pos (read-a-legal-move board))
                          (new-board (make-move
                                      *opponent*
                                      pos
                                      board)))
                     (print-board new-board)
                     (cond (( winner-p new-board)
                            (format t "~&You win!."))
                           ((board-full-p new-board)
                            (format t "~&Tie game."))
                           (t (computer-move new-board)))))
						   
						   
(defun read-a-legal-move (board)
                   (format t "~&Choose a number to select a square: ")
                   (print-board board)
                   (let ((pos (read)))
                     (cond ((not ( and (integerp pos)
                                        (<= 1 pos 9)))
                             (format t "~&Invalid input.")
                             (read-a-legal-move board))
                            ((not (zerop (nth pos board)))
                             (format t
                                     "~&That space is already occupied.")
                             (read-a-legal-move board))
                            (t pos))))
							
							
							
(defun computer-move (board)
                   (print-turn-break)
                   (let* ((best-move (choose-best-move board))
                          (pos (first best-move))
                          (strategy (second best-move))
                          (new-board (make-move
                                      *computer* pos board)))
                     (format t "~&My move: ~S" pos)
                     (format t "~&My strategy: ~A~%" strategy)
                     (print-board new-board)
                     (cond ((winner-p new-board)
                            (format t "~&I win!"))
                           ((board-full-p new-board)
                            (format t "~&Tie game."))
                           (t (opponent-move new-board)))))
						   
						   
(defun choose-best-move (board)
  (let ((win-strat (make-three-in-a-row board))
        (block-strat (block-opponent-win board))
        (center-strat (pick-center board))
        (make-two-strat (make-two-in-a-row board))
        (corner-strat (pick-corner board)))
    
                  (cond ((not (null  win-strat))
                         win-strat)
                        ((not (null block-strat))
                         block-strat)
                        ((not (null center-strat))
                         center-strat)
                        ((not (null make-two-strat))
                         make-two-strat)
                        ((not (null corner-strat))
                         corner-strat)
                        (t (random-move-strategy board)))))
                         
                        
(defun pick-center (board)
  (if (= 0 (nth 5 board)) 
      (list 5 "center move")
    NIL))

(defun pick-corner (board)
  (cond ((= 0 (nth 1 board))
         (list 1 "pick-corner"))
        ((= 0 (nth 3 board))
         (list 3 "pick-corner"))
        ((= 0 (nth 7 board))
         (list 7 "pick-corner"))
        ((= 0 (nth 9 board))
         (list 9 "pick-corner"))
        (t nil)))
				   
				   
(defun random-move-strategy (board)
                   (list (pick-random-empty-position board)
                         "random move"))
						 
						 
(defun pick-random-empty-position (board)
                   (let ((pos (+ 1 (random 9))))
                     (if (zerop (nth pos board))
                         pos
                       (pick-random-empty-position board))))
					   

(defun make-two-in-a-row (board)
     (let ((pos (win-or-block board *computer*)))
                     (and pos (list pos "make two in a row"))))

					   
					   
(defun make-three-in-a-row (board)
                   (let ((pos (win-or-block board
                                            (* 2 *computer*))))
                     (and pos (list pos "make three in a row"))))
					 
(defun block-opponent-win (board)
                   (let (( pos (win-or-block board
                                             (* 2 *opponent* ))))
                     (and pos (list pos " block opponent"))))
					 
					 
					 
(defun  win-or-block (board target-sum)
                   (let(( triplet (find-if
                                   #'(lambda (trip)
                                       (equal (sum-triplet board trip)
                                              target-sum))
                                   *triplets*)))
                     (when triplet
                       (find-empty-position board triplet))))
					   
					   
					   
					   
(defun find-empty-position (board squares)
                   (find-if #'(lambda (pos)
                                (zerop (nth pos board)))
                            squares))


(setf *computer* 10)

(setf *opponent* 1)

(defun board-full-p (board)
                   (not (member 0 board)))



